package com.bestbuy.sdp.ejb;

import java.sql.SQLException;

import javax.ejb.SessionBean;
import javax.naming.NamingException;

import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;

import com.accenture.common.ex.ApplicationException;
import com.bestbuy.schemas.sdp.db.lookupVendorID.LookupVendorIDRequestDocument;
import com.bestbuy.schemas.sdp.db.lookupVendorID.LookupVendorIDResponseDocument;
import com.bestbuy.schemas.sdp.db.lookupVendorID.LookupVendorIDResponseDocument.LookupVendorIDResponse;
import com.bestbuy.schemas.sdp.db.lookupVendorID.impl.LookupVendorIDRequestDocumentImpl;
import com.bestbuy.schemas.sdp.db.retrieveOrder.RetrieveOrderResponseDocument;
import com.bestbuy.sdp.subscription.CSMSubscription;

import weblogic.ejb.GenericSessionBean;
import weblogic.ejbgen.RemoteMethod;
import weblogic.ejbgen.Session;
import weblogic.ejbgen.JndiName;
import weblogic.ejbgen.FileGeneration;
import weblogic.ejbgen.Constants;

/**
 * GenericSessionBean subclass automatically generated by OEPE.
 *
 * Please complete the ejbCreate method as needed to properly initialize new instances of your bean and add
 * all required business methods. Also, review the Session, JndiName and FileGeneration annotations 
 * to ensure the settings match the bean's intended use.
 */
@Session(ejbName = "CsmDBService")
@JndiName(remote = "ejb.CsmDBServiceRemoteHome"  , local="ejb.CsmDBServiceLocalHome")
@FileGeneration(remoteClass = Constants.Bool.TRUE, remoteHome = Constants.Bool.TRUE, localClass = Constants.Bool.TRUE, 
		localHome = Constants.Bool.TRUE)
public class CsmDBService extends GenericSessionBean implements SessionBean {
	private static final long serialVersionUID = 1L;

	public void ejbCreate() {
		// IMPORTANT: Add your code here
	}
	@RemoteMethod
	public RetrieveOrderResponseDocument migrateSubscription(String keyType, String keyValue) 
	throws NamingException, SQLException {

		RetrieveOrderResponseDocument response = null;
		CSMSubscription csm = new CSMSubscription();
		response = csm.migrateSubscription(keyType, keyValue);
		return response;
	}
	
	
	@RemoteMethod
	public RetrieveOrderResponseDocument retrieveSubscription(String keyType, String keyValue) 
	throws NamingException, SQLException {

		RetrieveOrderResponseDocument response = null;
		CSMSubscription csm = new CSMSubscription();
		response = csm.retrieveSubscription(keyType, keyValue);
		return response;
	}
	
	@RemoteMethod
	public LookupVendorIDResponseDocument retrieveVendorIdByContractID(XmlObject xmlRequestDoc) 
	throws NamingException, SQLException, ApplicationException {
		CSMSubscription csm = new CSMSubscription();
		final LookupVendorIDResponseDocument response = csm.retrieveVendorIdByContractID(xmlRequestDoc);
		return response;
	}
	
}